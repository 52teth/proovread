#-- licence -------------------------------------------------------------###
# 
#
#
#
#------------------------------------------------------------------------###
#
# $Id:  $
#
## proovread Config File

##-- style ---------------------------------------------------------------##

## This file can be digested by proovread when provided with -c/--cfg. 
##  Options supersede proovread default values but will be overwritten by
##  command line supplied values. The content is directly evaluated as 
##  perl code (list in hash context), therefore proper syntax is crutial:
##   * "#" starts a comment, which is entirely ignored by the program, on
##     creation, every parameter is commented out, remove the "#" at the
##     beginning of the key => value line if you want your modifications to 
##     have effect
##   * Keys/Strings need to be enclosed '' or ""
##   * Each key requires a value
##   * undef (without ''/"") is a perl keyword, use it if value is unknown/
##     not available
##   * each key => value pair has to be followed by a ","
##   * white space has no effect but better readability
##   * since parameter are evaled, you can use code snippets to determine 
##     parameter dynamically, e.g. to auto-detect the maximum number of 
##     threads available replace:
##     'threads' => 8,
##     by
##     'threads' => qx(grep '^processor' /proc/cpuinfo | wc -l) =~ s/\n//r,
##     or use perl glob(*.fq) to auto-detect input files...
##   * if you want to create a customized, slim version of this config, the
##     only requirement is that it forms a valid perl list of alternating 
##     keys and values with an even number of arguments total. E.g. these 
##     one liners would make equivalent, complete and proper configs:
##
##         'long-reads',"LR.fa",'short-reads',"SR.fq"
##     or 
##         'long-reads' => "LR.fa", 'short-reads' => "SR.fq"
##
##    * Constrasting to the command line behaviour, keys cannot be 
##      abbreviated


##-- command line parameter ----------------------------------------------##

## LIST of Pacbio read files to correct. FASTA or FASTQ format. 
'long-reads' => [],

## LIST of high confidence short read files used for correction in FASTQ or FASTA format.
'short-reads' => [],

## Prefix to output files. Defaults to 'proovread'
'prefix' => undef,

## Coverage cutoff for highest scoring mappings at each location.
'coverage' => 50,

## Number of threads to use for mapping. Defaults to 8 (or maximum available 
##  number of processors, if kess than 8 availabe).
'threads' => 4,
## to auto-detect max processors use:
##  'threads' => qx(grep '^processor' /proc/cpuinfo | wc -l) =~ s/\n//r,

## 
'mode' =>  undef, #'pacbio-pre', 'pacbio-iterative', 'pacbio-ccs', 'external-sam'
# for custom modes see mode_passes in the "advanced options" section

## Use already created mapping in SAM format to create corrected consensus 
##  sequences from. Use this as alternative input to --long-reads/short-reads
##  If --sam is specified, --mode is automatically set to "external-sam".
'sam' => undef,

## By default, while mapping, a temporary SAM file is created and an index to
##  this file is kept in memory. This limits the memory requirement for one SMRT
##  cell (>100Mbp, 50X coverage) to less than 10Gb. 
##
## Specify '--ram-sam' to hold the SAM presentation entirely in memory. This is
##  faster and saves disk space, but might require up to 100GB per SMRT cell. 
'ram-sam' => undef,

## Sort the filtered SAM files by coordinates in addition to the 
##  sorting of references. This has no effect on the pipeline, and is just 
##  a convenience if you need the files for something else.
'sort-sam-by-coordinates' => undef,

## Specify '1' to keep temporary file of each pass, '2' to also keep the
##  individual temporary file of each thread.
'keep-temporary-files' => 0,  # 0,1,2

## overwrite exiting output folder
'overwrite' => 0,


##-- advanced parameter --------------------------------------------------##
## don't mess with these unless you know what you are doing

## Short read quality offset, usually 64 or 33, use 0 for FASTA. Defaults to 
##  guessing, Specify value if guessing fails. Needs to be the same for all
##  short read files provided.
'sr-qv-offset' => undef,

## Short read length. Defaults to guessing, sampling 1000 reads from input
##  file. Specify value if guessing fails.
'sr-length' => undef,

## Number of short reads provided, used for ETA calculation. Defaults to 
##  guessing based on 1000 randomly sampled reads. Specify value if guessing
##  fails.
'sr-count' => undef,

## Toggle short reads head/tail trimming including leading/trailing indels 
##  sr-indel-taboo-length
'sr-trim' => 1,

## Fraction of short reads used in pre masking steps
'sr-pre-fraction' => {
	'shrimp-pre-1' => 0.1,
	'shrimp-pre-2' => 0.2,
	'shrimp-pre-3' => 0.2,
	'shrimp-pre-4' => 0.2,
},

## Trim reads to prevent insertions/deletions within the first 
## 'sr-indel-taboo-length' fraction of the read. N=0 deactivates the feature.
'sr-indel-taboo' => 0.1,

## Detect and identify chimera like looking reads
'detect-chimera' => 1,

## Number of bases at the end of a hcr from the first iteration, which will
##  not be masked before the second iteration
'hcr-sticky-length' => 40,

## Minimum length of a hcr region to be considered as such.
'hcr-mask-length' => 120,

## Number of reads to check out at once for individual consensus correction 
##  process. Memory intensive step, be cautios with great values
'chunk-size' => 100,

## Size in base pairs of bins for local score comparisons
'bin-size' => 20,

## If '1', only realign previously mapped reads in finishing step, if '0' 
##  align the entire short read set again. Default is undef, which toggles
##  auto-detection. Uses '1' if short read data computes to cover long reads
##  more than 100X, in this case realigning only mapped reads is much faster,
##  else realigns all reads, which is probably even faster than realigning 
##  all mapped reads from multiple iterations.
'finish-aligned-only' => undef,


##-- task settings -------------------------------------------------------##

'mode-tasks' => {
	# illumina, evenly covered, e.g. genome
	'pacbio-pre' => ['read-long', 'shrimp-pre-1', 'shrimp-pre-2', 'shrimp-pre-3', 'shrimp-pre-4', 'shrimp-finish'],
	# illumina, unevenly covered, e.g. quant. RNA-seq, slower than pacbio-pre
	'pacbio-iterative' => ['read-long', 'shrimp-iter-1', 'shrimp-iter-2', 'shrimp-finish'],	
	# Circualar Consensus, 454...
	'pacbio-ccs' => ['read-long', 'shrimp-ccs', 'shrimp-finish'],
	'external-sam' => ['read-sam'],
	# custom => ['my-pass-settings, finish],  #...
},

## shrimp pass 1
'shrimp-iter-1' => {
	'-h' => "65%",
	'--report' => 1000,
	'-s' => "w12",
	'--no-mapping-qualities' => '',
	'--match' => 5,
	'--mismatch' => -11,
	'--open-r' => -2,
	'--open-q' => -1,
	'--ext-r' => -4,
	'--ext-q' => -3,
	'--trim-off' => '',
},

## shrimp pass 2
'shrimp-iter-2' => {
	'-h' => "60%",
	'--report' => 1000,
	'-s' => "w10",
	'-r' => "45%",
	'-w' => "120%",
	'--no-mapping-qualities' => '',
	'--match' => 5,
	'--mismatch' => -11,
	'--open-r' => -2,
	'--open-q' => -1,
	'--ext-r' => -4,
	'--ext-q' => -3,
},

## shrimp ccs
'shrimp-ccs' => {
        '-h' => "60%",
        '--report' => 100,
        '-s' => "w14",
        '-r' => "200",
        '-w' => "120%",
        '-H' => '',
		'--no-mapping-qualities' => '',
        '--trim-off' => '',
        '--match' => 5,
        '--mismatch' => -11,
        '--open-r' => -2,
        '--open-q' => -1,
        '--ext-r' => -4,
        '--ext-q' => -3,
        '--longest-read' => 3000,
},

## shrimp pass 2
'shrimp-pre-1' => {
	'-h' => "55%",
	'--report' => 200,
	'-s' => "1"x11,
	'-w' => "130%",
	'--no-mapping-qualities' => '',
	'--match' => 5,
	'--mismatch' => -11,
	'--open-r' => -2,
	'--open-q' => -1,
	'--ext-r' => -4,
	'--ext-q' => -3,
},

## shrimp pass 2
'shrimp-pre-2' => {
	'-h' => "55%",
	'--report' => 200,
	'-s' => "1"x10,
	'-w' => "140%",
	'-r' => "45%",
	'--no-mapping-qualities' => '',
	'--match' => 5,
	'--mismatch' => -11,
	'--open-r' => -2,
	'--open-q' => -1,
	'--ext-r' => -4,
	'--ext-q' => -3,
},

## shrimp pass 2
'shrimp-pre-3' => {
	'-h' => "50%",
	'--report' => 200,
	'-s' => "1"x9,
	'-w' => "140%",
	'-r' => "35%",
	'--no-mapping-qualities' => '',
	'--match' => 5,
	'--mismatch' => -11,
	'--open-r' => -2,
	'--open-q' => -1,
	'--ext-r' => -4,
	'--ext-q' => -3,
},

### shrimp pass 2
'shrimp-pre-4' => {
	'-h' => "35%",
	'--report' => 200,
	'-s' => ("1"x7).",111101111",
	'-w' => "150%",
	'-r' => "25%",
	'--no-mapping-qualities' => '',
	'--match' => 5,
	'--mismatch' => -11,
	'--open-r' => -2,
	'--open-q' => -1,
	'--ext-r' => -4,
	'--ext-q' => -3,
},

## shrimp finish
'shrimp-finish' => {
	'-h' => "85%",
	'--report' => 200,
	'-s' => "1"x20,
	'--hash-spaced-kmers' => '',
	'--match' => 5,
	'--mismatch' => -10,
	'--open-r' => -5,
	'--open-q' => -5,
	'--ext-r' => -5,
	'--ext-q' => -5,
},



##-- SeqFilter settings ---------------------------------------------##

'seq-filter' => {
	'--trim-win' =>  20,
	'--trim-lcs' =>  '3,50,100',
	'--min-length' => 500,
},
